A-3 CHANGES===========
changed lastLogTerm = -1 in prepReqVote, no idea why it was =r.currentTerm, and -1 line was commented.



==ASSIGN - 4:=========
1. assign ports to all
    Client port: S0-S4: 9000-9004
    Server port: S0-S4: 8000-8004
2. use conn to listen to servers 
2. send: make connection to the destn port, dump data on conn using gob encoder
3. receive: listen to self port, get data from gob decoder and dump it to self eventCh

Flow:
ServerStart
-makes raft obj by calling NewRaft
-uses that raft to start listening to servers,clients and then fires ServerSM


TO CHECK:==========
1. How to check if a connection already exists?--PENDING, works without it for now
pseudocode:
    if !portConnection.Exists(){
        conn := makeConnection()
        return conn
    }
    
    Or rather than trying to make connection agn n agn, just make it once when servers start.
    
Flow:
S1 sends voteReq by making connection with all
Now S0 gets the vote on its port and processes it. Now it should send on the same conn the request came on. It shouldnt
try to dial S1 again as connection is still there. But how does S0 know about it?
Ideally listenToServers must pass conn handle method which after processing writes to same conn.
BUT prob is servers are listening to their eventCh only. They process whatever comes on it and sends it back to destination by making another connection with it.
One way: After sending  i.e. writing to channel, close the connection,Only receiver should close the conn, not sender!

--Gob is changing the type of msg?? It is going in default case! Check !--IT IS RETURNING string--check tomrw--use interface{}--SOLVED

Problem: Connection between 2 followers
Problem 2:
Not able to decode a string!! A normal interface value! Func DecodeInterface prints nil--Works, Encode(&msg) not Encode(msg)--
Problem3: Decoding a struct, Doesnt work even if explicit types are provided on both sides, (two follower processes)
using EncodeInterface to send RV obj and DecodeInterface to receive it over conn, with explicit types--Doesnot work


Problem4 :
How does client send command to a particular server? via port numbers
How to get raftObj of that server? so as to call Append of that server---map of ClientPort-RaftObj? this gets initialised when servers are started--NO NEED
because listenToClients, handleClient are called via raft object only

Problem5:
Redirection by followers! What should be the point of redirection?--DONE

Problem6:--PENDING
when firing send for AE_Req in go, testcases sometimes get stuck on waiting on some channel (haven't checked) but without
go it passes all the time.--Not getting now-SOLVED

PROBLEM7: For loop in handleClient is causing problems! Test cases get stuck in leaderchanges--SOLVED

PROBLEM8:--PENDING
In logrepairnextIndex = response.LastLogIndex + 1  doesn't work many a times
//changed on 12 march--failing for some cases --CHECK, doesn't work with for loop in handleClient

TO DO TOmorrow(11-March)
1. Launch servers in a separate process- main pkg which must have raft imported, so raft pkg must be installed, so 
put all the raft codes in a folder raft and install it. then use it in this file.
2. Separate clientCH as done in assgn2, and separate testfile too
5. TestMRMC

7. Exec! Ask how to pass timeout?
8. Put CV in a struct in json format, write to file is not clear
9. =================++Make server binaries(5)-============
launch server in 5 diff terminals.
in 6th terminal , do telnet and send the command, and check if desired response is coming.
ctrl+c the leader to check leader changes.

10. To test commit from prev term.
pass election timeout while execing- i.e. ServerStart will have additional arg as eTimeOut. which will be inputted to candidate.
so when 

6. Control conn launched:
- each server maintains conn for every server
--map[Me]-["s0":conn,"s1":conn..etc]
- so whenever a serverX dials a serverY, X puts that conn in its raft. So X will have this conn everytime it wants to send to Y.
-Now Y must also store the receiveConn in its map, but how does it know the port of X? i.e. listener.Accept must also store the conn.


7. Advised by sir-kill an exec-ed process from testmethod, using os.cmd.ProcessId smthng

===DONE==
3. 
Since now follower is sending its lastindex also in AEresponse, so logrepair can set the nextIndex as followers
lastindex + 1 rather than decrementing nextIndexMap value 1 by 1.
Ex if Leader has LI as 10 , n follower1 has 2, then unecessarily, it will decrement from 10 to 2 in steps of 1.
So better decrement NI in map to (LI_f + 1), i.e. 3 since follower doesn't have 3-10 index entries
Overwriting will be done if the entries present are also wrong. so no prob in this too.
This is failing when handleClient for loop is uncommented.--CHECKING IS REMAINING,
"For loop" in handleClient is commented for now so MRMC ,MRSC is not handled. CHECK!, due to this leader is not receiving the responses and 
timing out on RetryTimeOut and becoming follower and starts log repair of all. after getting elected again as leader.
--DONE--SOLVED: Prob was new leader wasnot sending last log entry in HBs due to unintialised nextIndexMap
when new leader is elected, his nextIndexMap is not initialised so call setNextIndex after becoming leader
prev it was called only in AppendToLog_Leader()


4. Make EncodeInterface and DecodeInterface return err too.--DONE


Changes: (Stupid mistakes)
-f_obj in NewRaft was initialised above for loop, it should be inside, because it is the pointer, so if outside
all f_specifi[i] will point to same object.
-resetVotes in election loop.


Trying conn separation========
For testing: eTimeOut increased to 30s
--According to sir's sugestion-- put a for loop in the method which gets called after l.Accept, i.e. writeToEvChan'



==TRYING LAUNCHING Servers in separate process===
Steps:
-make a folder raft, with all files except client n test, install it
-make a folder clientCH with client file, install it
-make a folder server, which has Main.go to start servers, build to make binary
-keep test file in a directory containing these 3 folders
    --testfile code is in "pkg raft"
- then do go test
PROB:-Testmethod can't use any raft members! so not able to crash

-Exec must be done


EXEC Procedure explained:==ASK==
-Read_Exec, it is used for execing a binary
    -readJson: reads the data from json file, and arranges it in a ClusterConfig object and returns a ClustObj
    -then main func calls this method and gets the clust obj. Now it spreads it out in a string called vstr also finds thisServerId
        execs a binary(serverStarter) which takes these two fields as inputs.
    -since all servers are to be launched identically, it execs in a loop.
    -to include timeOut, prepare an array of waits and do
    exec.Command("serverStarter",v,thisServerId,w[i])
-serverStarter
    -this main pkg is what calls the method reqd to start the servers i.e. StartServer.
    -so now as we know above Read_Exec , spawns it and gives string as first input. but ServerStart needs clustObj, so it again
        compacts the recvd arg i.e. arg[1] into clustObj and calls the ServerStart giving the received args (after processing the first arg)
REDUNDANCY: no need to spread clustObj into string while execing. Therefore , serverStarter can directly pass the rcvd arg[1] to ServerStart
as done with thisServerId
OR may be, you can pass only strings while execing. ?? since thisServerId is also converted to string--TO BE checked


16-04-2015
1.
-===LOGIC BUG!!===
In logAsGoodAsMine, request's lastLogTerm was being compared with self currentTerm, but it should be compared with lastLogTerm because in case
elections happened and no CA came, then r.currentTerm will increment and become different than lastLogTerm.
prev code was :

func (r *Raft) logAsGoodAsMine(request RequestVote) bool {  
    return (request.LastLogTerm > r.CurrentTerm || (request.LastLogTerm == r.CurrentTerm && request.LastLogIndex >= r.MyMetaData.LastLogIndex))
    
}
new Code is:

func (r *Raft) logAsGoodAsMine(request RequestVote) bool {
    var myLastLogTerm, myLastLogIndex int
    myLastLogIndex = r.MyMetaData.LastLogIndex
    if len(r.MyLog) == 0 {
        myLastLogTerm = -1
    } else {
        myLastLogTerm = r.MyLog[myLastLogIndex].Term
    }   
    return (request.LastLogTerm > myLastLogTerm || (request.LastLogTerm == myLastLogTerm && request.LastLogIndex >= myLastLogIndex))
}

2. Connections are 2 per server, because, receiver doesn't know which sender has connected to it, so map has no details when a server is 
a receiver (writeToEvChan method),--FOR Now
TO BE DONE: in send(), if 1st time, send id first.
        in writeToEvChan, decode the id first and set the self map, outside for loop.
        
3. Re-added Path member in ClusterConfig for ease of use of exec file,
but it is taking prev install of raft from assgn4/Pkg??--Reinstall raft pkg in Exec/pkg


To ask:
1. kvstore shud modify conn? if not hw will it close the conn if an error, by sending sm return value?
2. Exec-readJson to be moved to testmethod?
3. Creating folder in golang? for disk files
4. Sig kill confirm? exec.Command ? 
    -a := exec.Command("xx")
    a.Process.Kill ? or Pid?
5. 



===TO DO ========
1. Make conn to use write and read in handleClient and Client methods, since it uses only strings! also it will be able to display results
on terminal(hopefully gob was the cause for that)

2. LOGIC BUG: Leader must also receive RequestVote, in case a follower crashes(not partitions) and comes back up as foll->candidate and sends
RV to all, now leader must respond false and that candidate will revert to follower
This is not needed cz when follower comes up, it immed gets the HB.. above was happening bcz conn was stale. Now leader tries to make conn
with foll(if conn is stale, i.e. Encode fails) every HB
3. Error in index out of range in acks = &r.MyLog[lastindex].ack ?? 
4. Append only new entry to file not the entire db!





===========++Checking++ Telnet in SingleServerBinary_Changing conn=====

CHanges:
0: --Changing conn of handleClient and Client to read and write works for telnet
1. in leader, AE_Response:
if responseCount >= majority-1 { //excluding self
    in advanceCI, serviceAE,leader
2. In kvStoreprocessing
    --1
    if l > 1 {
        op = strings.ToLower(cmd[0])
        value = str[1]
        key = cmd[1]
    } else {
        op = ""
    }
    --2
     default:
        //sr = "ERRINTERNAL\r\n"
        sr = "ERR_CMD_ERR\r\n"
    }

3. weird things happening! get abc\r\n splits on \r\n as get and abc\r\n  when checked in KvStore printlns but when checked in 
ide in a separate program it doesn't :/
\r\n is coming in string when string is adjacent to like set abc X\r\n => set,abc,X\r\n


===In execFromTest
1. Moved ServerSM to ServerConnHandler file
2. Created CreateLogs for testing, but go routines are not writing
3. FInd some way to write to files for all servers
4. Servers not getting launched for last 5min,--

 
====SUnday(19 april)==Working in SingleServerbinary with conn read change===
1. Candidate must handle RequestVote too!
2. detected a bug, when no log data, when majority are not up, then candidate keeps restarting the election, then one more
server comes up(which now mks majorit), this either gets the RV while in follower(this shud happen but its nt,bcz of election timeout 
being large?), or enters candidate mode(this happening), now it will get the RV but it doesn't respond false, since
When more than 1 are in candidate mode, it gets stuck for every1
---Retry the same RV continuously till majority responses are rcvd, if election timer fires, 
then retry the election procedure with new term--==============FIXED with ResendVoteTimer

3. acks bug caught!!!- follower is responding correctly by setting isHB true, but by chance follower enters candidate mode, and
accepts other as leader but doesn't set isHB true!--===========FIXED
	-also, if new server comes up with no log, then it sends false with lastLogIndex as -1, in which case ack statemnt fails!
	so if last index is -1, logrepair must be started immediately, no need to check ack.
	Why is HBTimer reset bfr logrepair call after ack if?--removed for nw
4. How is this case handled? say follower1 and leader0, log empty, term 0, bcz of some reason follower times out and becomes candidate
now he has term 1, but leader has 0.what shud happen is s1 now becomes leader and s0 becomes follower since no log, all are potential leaders
in case log is there, if log length is same for both, above case,
if new candidate has shorter log but higher term(due to election), -===asked sir

5. When a server crashes, then it must maintain its prev log and read it when it comes back up!! :O how to do that?? Right now it starts afresh 
and log repair is happening correctly
So in create disk files, when files already exist then read and update the data!!--PENDING
6. Shared serviceAE_Req code in follower and candidate--done
7. PROBLEM:= it keeps repairing log for 3 n 4 when S1 was leader, appended entries and crashed. Now S2 is leader
and dunno why it starts repairing log of 3 and 4 with failed and NI as 0
8. When first CA comes to leader, it starts repairing log dnt know why--shouldn't be a problem since leader appends to self log are
fast and till follower gets 1st request , leader LI might have jumped to greater than 1. and test cases are passing so!==FIXED
9. BUG:
	in prepAEReq,Term was being set as log's last term, but it should always be r.currentTerm bcz, leader might be new, and had no 
	entries in log corresponding to that term.
10, BUG: leader always sends its prevLog entry's term and index, but in this line of serviceAE_Req
	if request.LeaderLastLogIndex == myLastIndex && request.Term == myLastIndexTerm {
		it is matching requests term which is leader's currentTerm not last log term (as changed in BUG 9)
		hence leader must send lastLogTerm too
	due to this also change the term of the entry followers append to log, i.e. in AppendToLog_Follower
	change Term = req.term to req.lastlogterm
	Also due to this, assign LastLogTerm in prepAEReq accordingly, when entries are nil then it is -1 else it is that entry's term.



11. ====CRITICAL=====
Situation is, when lot of appends are going on,, like 30 40 requests, then say, S0 is leader and has entries 40
S1,S2 are at 20
S3, S4 at 35, but now , if any of S3 or S4 times out(temp partition), they will get votes from each other and S1 S2 and become leader.
CommitIndex must be of some use here!

12. Check and expire is not passing, going out of index.--Commented for now
13. When more than 1 candidate, then nobody is winning, all get stuck in candidate state!
	
==Changes made==
1. Removed decode encode handleClient method (was commented)--Removed
2. Fixed bug 7,9,10
3. changed break -> return in handleClient else block


Status:
1. ALl tests pass except MRMC after leader changes --PASSED NOW
2. Use state var in serviceRV, (for now it is not used--too tired to test agn!)--No need, it was for testing, but can be used
3. execFromTest and BinaryLatest has latest working code. CheckNExpire not passing=============, rest passed 2wice using exec
use binary launching in terminals to debug.
SIGTERM- commitEntryFrom prev term test is remaining

COnfusions:
1. In serviceAE_Response, if lastLogIndex is -1 whether to call logrepair or just set NI to 0--setting 0 for now
2. in serviceAE_Req, if entries are nil, what else to check?
	can there be a case, when leader is nil, but follower has entries=---NO! Only one with lengthier log becms leader.
	so say S1 had good long log and is leader. S2 S3 are consistent followers.
	now if S0 starts, it can never be leader. till any of the one above is up.
3. Case mailed to sir.

STatus: 23/april
-No changes made to kvstore or any file, kvstore is working fine for now.

TO DO:
1. read from disk , when folder exists!--DONE
2. Check n expire --passes most of the times, when stuck , then all go into candidate mode..! Test this
3. commit entry from prev term
4. CRITICAL case 11. as given above and also 12 13
5. Check 2 (in 24 April) prob, print what is leader sending.

24 APRIL:
1. Added code for case (mailed to sir)to myRaft, serviceRequestVote: ideally when a candidate with short log comes up,sends RV to leader, leader shud check 
if he is deserving, if not send false, but also update self term if req.term is greater: Changed in serviceRV--DONE
2. Shifted call to register types from writeToEvChan to DecodeInterface--cz sometimes gob decoding error comes due to which follower times out
3. Shifted nextIndex to f_specific, removed nextIndexMap
4. Changed the err msg in DecodeInterface (ServerConnHandler) when it is EOF and in writeToEvChan
5. Removed HB timer reset from follower RV case--works fine for now, but test this case
	- deserving candidate say s1 comes when election is going on already by say S2. So s1 shud win and send HB to all, then only followers timer
	will be reset , else s2 will keep timing out.
6. Modifying CV to a struct --DONE --working
7. Modifying for read from disk now --done--working
8. Removed marshalling and string conversion from writeLogToDisk--Done working


Doubts:
1. shouldnt commit index also be dumped to disk? what happens when a server resumes, it loads its log ,CV from disk, sets metadata, so 
what bout CI field in metadata, asked sir!
2. Why should HB Timer be reset on getting RV? in case of non-deserving candidate, it shouldnt be. But if deserving , but not getting elected 
as leader, then follower will timeout. is this right? yes sounds right.--removed and it works for now, test 1 more case as given in 5. above
OR reset HB timer only when voting true for it.--Check this.

==execFromTest passed few times.
In SingleServerbinary_Latest
TIme is appearing like msecs, but it is second only, what is happening???